# This README is for training purposes only and is to be used only
# in support of approved training. The author assumes no liability
# for use outside of a training environments. Unless required by
# applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, either express or implied.

# Title: README.txt 
# Author: WKD
# Date: 200530

Note: This work was built on scripts provided by Cloudera PS. They have been modified for classroom purposes.

Purpose: This goal is to install SSL across a HDP cluster. The first task is to generate the required signing certificates from a CA. The second tasks is to use this certificate to sign certs and keystores on all nodes. This must be done for the local host and for Ranger. The third task is to use a python script to load the JSON file into Ambari. The fourth task is to restart both Ambari and the HDP cluster.

GENERATE YOUR OWN CA CERTS
1. We are using certificates created on Microsoft Certificate Services. 

2. Instructions for generating a request and passing them to the CA are found in the certificates README. 

3. You will need to contact your local Certificate Authority and request support for signed keys.

EDIT THE CONFIGS FILE
1. Edit the config file to add the domain and certificate info.

	% vim configs 

2. Copy the configs file into ambari-ssl. Ensure these are both in sync.

	% cp configs ../ambari-ssl/

GENERATE CA CERTS
1. IMPORTANT: This task needs to be done once on the admin host. This does not need to be repeated on every host.

2. This task will copy over a domain signed certificate signing request (cer) in to the ca directory. It will also copy over a domain signing keys into the keys directory. The name of these files are:

	cloudair.lan.crt
	cloudair.lan.key
	cloudair.lan.der

3. Copy in the cert files.

	% sudo ./generate-hdp-ssl.sh GenerateCACert configs

PREPARE TO GENERATE-HDP-SSL
1. Go to the directory for ssl.

	% cd ~/sbin/ssl/hdp-ssl

2. Create a tar file.

	% cd ..
	% tar cvf /tmp/hdp-ssl.tar hdp-ssl

PUSH AND EXTRACT 
1. Push the tar file to all hosts

	% run-remote-files.sh push /tmp/hdp-ssl.tar /tmp

2. Extract the tar file on all hosts 

	% run-remote-files.sh extract /tmp/hdp-ssl.tar  /tmp

3. Clean up the tar file on all hosts

	% run-remote-files.sh delete /tmp/hdp-ssl.tar

RUN GENERATE-SSL
IMPORTANT: The setup-hdp-ssl.sh has a DIR variable set to /tmp/hdp-ssl. The
script expects to find the generate file in this directory.

1. Run the install command on all hosts

	% run-remote-files.sh run /tmp/hdp-ssl/setup-hdp-ssl.sh

2. The setup-hdp-ssl.sh will run the generate-hdp-ssl.sh with the options:

	GenerateKeys
	GenerateTruststore
	GenerateRanger
	GenerateJCEKS
	
VALIDATE GENERATE-SSL
1. Check various nodes the certs and keys. Check the following directories:

	% ls /etc/security/keystores/
		creds.jceks  ranger-plugin.jks	server.jks
	% ls /etc/security/truststores/
		ranger-truststore.jks truststore.jks
	% ls /etc/security/pki/
		server.crt server.key server.p12

ROLLBACK GENERATE-SSL
1. If you need to rollback on all hosts you must run the rollback script. This is important to do as the cacerts keystore has been updated with the generate script. This will set this file back to the original state.

	% run-remote-files.sh run /tmp/hdp-ssl/rollback-hdp-ssl.sh

2. You can then run the setup-hdp-ssl.sh script again.
