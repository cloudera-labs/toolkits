---
- name: Check the cluster configs
  block:
    - name: Find existing clusters
      cm_api:
        endpoint: /clusters?clusterType=any
      register: cluster_summary

    - name: Parse CM clusters summary 
      set_fact:
        cluster_sum: "{{ cluster_summary.json }}"

- name: Check security configs
  block:
#    - name: Check the cluster Auto-TLS state
#      cm_api:
#        endpoint: /clusters/Cluster1/isTlsEnabled
#        method: GET
#      register: _autotls_state

    - name: Get TrustStore password
      cm_api:
        endpoint: /certs/truststorePassword
        method: GET
      register: _truststore_password

    - name: Get KeyStore password
      command: cat /var/lib/cloudera-scm-agent/agent-cert/cm-auto-host_key.pw
      register: _keystore_password
  when: "security | default(false)"

- name: Debug Import Cluster1 Template
  block:
    - set_fact:
        cluster_template_tls_json: "{{ lookup('template', 'CM_PROD_template361.j2', convert_data=False) }}"
      vars:
        truststore_password: "{{ _truststore_password.content | default(omit) }}"
        keystore_password: "{{ _keystore_password.stdout | default(omit) }}"
#  when: _autotls_state is defined and _autotls_state


- name: Import Cluster1 template
  uri:
    url: "{% if security | default(false) %}https{% else %}http{% endif%}://cmhost:{% if security | default(false) %}7183{% else %}7180{% endif%}/api/v44/cm/importClusterTemplate?addRepositories=false"
    method: POST
    body_format: json
    body: "{{ lookup('template', 'CM_PROD_template361.j2', convert_data=False) }}"
    force_basic_auth: yes
    status_code: 200
    user: admin
    password: admin
    return_content: yes
    validate_certs: no
  register: cluster_template_result
  until: "'startTime' in cluster_template_result.content" 
  retries: 5
  delay: 10
  ignore_errors: yes
  vars:
    truststore_password: "{{ _truststore_password.content | default(omit) }}"
    keystore_password: "{{ _keystore_password.stdout | default(omit) }}"
  failed_when: "'Failed to import cluster template' in cluster_template_result.content or 'startTime' not in cluster_template_result.content"


- name: Parse CM command ID
  set_fact:
    command_id: "{{ cluster_template_result.json.id }}"
    parcels_cmd_id: "{{ cluster_template_result.json.id+2 }}"
  ignore_errors: yes
#  when: "'Cluster1' not in cluster_summary.content"


- name: Verify CM Import command progress
  block:
    - name: You could login to CM and monitor Import Cluster Template progress.
      debug:
        msg="{% if security | default(false) %}https{% else %}http{% endif%}://cmhost.example.com:{% if security | default(false) %}7183{% else %}7180{% endif%}/cmf/command/{{ command_id }}/details"
        

    - name: NOTE
      debug:
        msg="FAILED - RETRYING messages can be ignored"

- name: Verify CM Import command progress
  block:
    - name: Wait for DeployParcels command to complete.
      uri:
        url: "{% if security | default(false) %}https{% else %}http{% endif%}://cmhost:{% if security | default(false) %}7183{% else %}7180{% endif%}/api/v41/commands/{{ parcels_cmd_id }}"
        body_format: json
        force_basic_auth: yes
        user: admin
        password: admin
        return_content: yes
        validate_certs: no
      register: _parcels_command_result
      until: not _parcels_command_result.json.active
      ignore_errors: yes
      retries: 20
      delay: 90

    # - name: Restore Parcels related tables
    #   mysql_db:
    #     state: import
    #     name: "{{ cloudera_manager_database_name }}"
    #     target: "{{ role_path }}/files/parcels_def.sql"
    #   when: "'Failed to deploy parcels' in _parcels_command_result.content"

    - name: Create missing .torrent files
      shell: | 
        for parcel_file in /opt/cloudera/parcel-repo/*.parcel; do sudo transmission-create -s 512 -o "${parcel_file}.torrent" "${parcel_file}" ; done
        sudo chown cloudera-scm:cloudera-scm /opt/cloudera/parcel-repo/*
      when: "'Failed to deploy parcels' in _parcels_command_result.content"

    # - name: Retry launch command
    #   cm_api:
    #     endpoint: "/commands/{{ command_id }}/retry"
    #     method: POST
    #     timeout: "{{ cluster_restart_timeout }}"
    #   register: response_retry
    #   ignore_errors: yes
    #   vars: 
    #     cluster_restart_timeout: 100
    #   when: "'Failed to deploy parcels' in _parcels_command_result.content"

    - name: Retry Import command.
      uri:
        url: "{% if security | default(false) %}https{% else %}http{% endif%}://cmhost:{% if security | default(false) %}7183{% else %}7180{% endif%}/api/v41/commands/{{ command_id }}/retry"
        method: POST
        force_basic_auth: yes
        user: admin
        password: admin
        return_content: yes
        validate_certs: no
      register: _retry_command_result
      # until: "'DeployParcels' in _retry_command_result.content"
      # retries: 3
      # delay: 20
      when: "'Failed to deploy parcels' in _parcels_command_result.content"

# Task to be validated 
    # - name: Wait for DeployParcels command to complete.
    #   uri:
    #     url: "{% if security | default(false) %}https{% else %}http{% endif%}://cmhost:{% if security | default(false) %}7183{% else %}7180{% endif%}/api/v41/commands/{{ parcels_cmd_id }}"
    #     body_format: json
    #     force_basic_auth: yes
    #     user: admin
    #     password: admin
    #     return_content: yes
    #     validate_certs: no
    #   register: _parcels_command_result
    #   until: not _parcels_command_result.json.active
    #   retries: 20
    #   delay: 90
    #   failed_when: "'Failed to import cluster template' in _parcels_command_result.content or 'startTime' not in _parcels_command_result.content"
##########
# - name: Restore Parcels related tables
#   mysql_db:
#     state: import
#     name: "{{ cloudera_manager_database_name }}"
#     target: "{{ role_path }}/files/parcels_def.sql"

    # - name: Pause for 15 seconds
    #   pause:
    #     seconds: 30

    - name: Wait for First Run command to start.
      uri:
        url: "{% if security | default(false) %}https{% else %}http{% endif%}://cmhost:{% if security | default(false) %}7183{% else %}7180{% endif%}/api/v41/commands/{{ command_id }}"
        body_format: json
        force_basic_auth: yes
        user: admin
        password: admin
        return_content: yes
        validate_certs: no
      register: _firstrun_command_result
      until: "'First Run' in _firstrun_command_result.content"
      retries: 30
      delay: 90
      when: "security|default(false) and encryption == 'yes' | default('no')"
      failed_when: "'Failed to import cluster template' in _firstrun_command_result.content or 'startTime' not in _firstrun_command_result.content"

    - name: Apply KTS Pre configs on kts-1 and kts-2
      include_tasks: prepare_kts.yml
      when: "security|default(false) and encryption == 'yes' | default('no')"

- name: Verify CM Import command progress
  block:
    - name: Wait for Import Cluster Template command to complete.
      uri:
        url: "{% if security | default(false) %}https{% else %}http{% endif%}://cmhost:{% if security | default(false) %}7183{% else %}7180{% endif%}/api/v41/commands/{{ command_id }}"
        body_format: json
        force_basic_auth: yes
        user: admin
        password: admin
        return_content: yes
        validate_certs: no
      register: result
      until: not result.json.active
      retries: 30
      delay: 90
#      failed_when: "'Failed to import cluster template' in result.content or 'startTime' not in result.content"

    - name: Retry First Run command
      cm_api:
        endpoint: "/commands/{{ command_id }}/retry"
        method: POST
        timeout: "{{ cluster_restart_timeout | default(900) }}"
      register: response_retry
      #ignore_errors: yes
      vars: 
        cluster_restart_timeout: 3600
      when: "'Failed to perform First Run of services' in result.content"

    - name: Wait for Import Cluster Template command to complete.
      uri:
        url: "{% if security | default(false) %}https{% else %}http{% endif%}://cmhost:{% if security | default(false) %}7183{% else %}7180{% endif%}/api/v41/commands/{{ command_id }}"
        body_format: json
        force_basic_auth: yes
        user: admin
        password: admin
        return_content: yes
        validate_certs: no
      register: result
      until: not result.json.active
      retries: 30
      delay: 90
      failed_when: "'Failed to import cluster template' in result.content or 'startTime' not in result.content"


    - name: Find cluster template command URL for troubleshooting
      set_fact:
        command_details_url: "{{ cluster_template_result.url | regex_replace('/api/.*','/cmf/command/' ~ template_resp.json.id | string ~ '/details' ) }}"
      ignore_errors: yes
      when: "cluster_template_result.failed and 'id' in cluster_template_result.json and 'Cluster1' not in cluster_summary.content"

    - name: Fail because of unsuccessful cluster template import
      fail:
        msg: >
          "Cluster template import failed.
          Result message: {{ cluster_template_result.json.message }}"
      when: cluster_template_result.failed and command_details_url is not defined

    - name: Fail because of unsuccessful cluster template import
      fail:
        msg: >
          "Cluster template import failed.
          Result message: {{ cluster_template_result.json.resultMessage | default(cluster_template_result.json.message) }}
          Check {{ command_details_url }} for further troubleshooting information."
      when: cluster_template_result.failed and command_details_url is defined

##################### KTS Cluster ###################
- name: Import KTS Cluster Template
  block:
    - name: Import KTS
      cm_api:
        endpoint: /cm/importClusterTemplate?addRepositories=true
        method: POST
        body: "{{ lookup('template', 'CM_KTS_template361.j2', convert_data=False) }}"
      register: cluster_template_result
      ignore_errors: yes
      retries: 5
      delay: 10
      vars:
        truststore_password: "{{ _truststore_password.content | default(omit) }}"
        keystore_password: "{{ _keystore_password.stdout | default(omit) }}"
  when: "security|default(false) and encryption == 'yes' | default('no')"

##################### KTS Cluster ###################
# - name: Import KTS Cluster Template
#   block:
#     - name: Import KTS cluster template
#       uri:
#         url: "{% if security | default(false) %}https{% else %}http{% endif%}://cmhost:{% if security | default(false) %}7183{% else %}7180{% endif%}/api/v44/cm/importClusterTemplate?addRepositories=false"
#         method: POST
#         body_format: json
#         body: "{{ lookup('template', 'CM_KTS_template361.j2', convert_data=False) }}"
#         force_basic_auth: yes
#         status_code: 200
#         user: admin
#         password: admin
#         return_content: yes
#         validate_certs: no
#       register: cluster_template_result
#       until: "'startTime' in cluster_template_result.content" 
#       retries: 30
#       delay: 10
#       ignore_errors: yes
#       vars:
#         truststore_password: "{{ _truststore_password.content | default(omit) }}"
#         keystore_password: "{{ _keystore_password.stdout | default(omit) }}"

    # - name: Parse CM command ID
    #   set_fact:
    #     command_id: "{{ cluster_template_result.json.id }}"
    #     parcels_cmd_id: "{{ cluster_template_result.json.id+2 }}"
    #   ignore_errors: yes

    # - name: Wait for First Run command to start.
    #   uri:
    #     url: "{% if security | default(false) %}https{% else %}http{% endif%}://cmhost:{% if security | default(false) %}7183{% else %}7180{% endif%}/api/v41/commands/{{ command_id }}"
    #     body_format: json
    #     force_basic_auth: yes
    #     user: admin
    #     password: admin
    #     return_content: yes
    #     validate_certs: no
    #   register: _firstrun_command_result
    #   until: "'First Run' in _firstrun_command_result.content"
    #   retries: 30
    #   delay: 5
    #   when: "security|default(false) and encryption == 'yes' | default('no')"
    #   failed_when: "'Failed to import cluster template' in _firstrun_command_result.content or 'startTime' not in _firstrun_command_result.content"

    # - name: Apply KTS Pre configs on kts-1 and kts-2
    #   include_tasks: prepare_kts.yml


    # - name: Retry First Run command
    #   cm_api:
    #     endpoint: "/commands/{{ command_id }}/retry"
    #     method: POST
    #     timeout: "{{ cluster_restart_timeout | default(900) }}"
    #   register: response_retry
    #   #ignore_errors: yes
    #   vars: 
    #     cluster_restart_timeout: 3600
    #   when: "'Failed to perform First Run of services' in result.content"
  # when: "security|default(false) and encryption == 'yes' | default('no')"


#####################################################